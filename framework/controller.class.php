<?php	class JLController {			var $appName;				function JLController($appNameNew) {			$this->setAppName($appNameNew);		}				function setAppName($appNameNew) {			$this->appName = $appNameNew;		}						/*			charge un élément (model, vue, autre...)			$elementType (string): model, view			$elementName (string): nom de l'élément, exemple le model "Toto", ce qui donnera le fichier modelToto.php			$elementCustomName (string): nom à donner à l'élément ajouté au controller, exemple modelTotoQuiTue			$admin (bool): composant front-end (false) ou back-end (true) ?			$appLoad (string): nom de l'application à partir de laquelle charger l'élément (par défaut on prendra l'appli du controller)		*/		function addElement($elementType, $elementName = '', $elementCustomName = '', $admin = false, $appLoad = '') {					// détermine si c'est une appli front ou back			if(!$admin) { // app coté front				$path	= SITE_PATH;			} else { // app coté back				$path	= SITE_PATH_ADMIN;			}						// appli custom à charger ou celle de l'appli du controller ?			if(!$appLoad) {				$appLoad = $this->appName;			}						// include la view			include_once($path.'/app/app_'.$appLoad.'/'.$elementType.ucwords($elementName).'.php');						// nom custom ?			if(!$elementCustomName) {				$elementCustomName = $elementName ? $elementName : $elementType;			}						// instancie la vue de l'élément			$elementClassName				= $appLoad.ucwords($elementType).ucwords($elementName);			$this->{$elementCustomName} 	= new $elementClassName;					}				// voir définition addElement()		function addView($viewName = '', $viewCustomName = '', $admin = false, $appLoad = '') {			$this->addElement('view', $viewName, $viewCustomName, $admin, $appLoad);		}				// voir définition addElement()		function addModel($modelName = '', $modelCustomName = '', $admin = false, $appLoad = '') {			$this->addElement('model', $modelName, $modelCustomName, $admin, $appLoad);		}			}	?>